
一个队伍三个队员的水平值分别是3,3,3.那么队伍的水平值是3
一个队伍三个队员的水平值分别是3,2,3.那么队伍的水平值是3
一个队伍三个队员的水平值分别是1,5,2.那么队伍的水平值是2
为了让比赛更有看点,牛牛想安排队伍使所有队伍的水平值总和最大。
如样例所示:
如果牛牛把6个队员划分到两个队伍
如果方案为:
team1:{1,2,5}, team2:{5,5,8}, 这时候水平值总和为7.
而如果方案为:
team1:{2,5,8}, team2:{1,5,5}, 这时候水平值总和为10.
没有比总和为10更大的方案,所以输出10.
#include<iostream>
#include<algorithm>
#include<vector>
using namespace std;
int main()
{
// IO型OJ可能会有多组测试用例，所以这里要持续接收输入多组测试用例。
int n;
while (cin >> n)
{
long long sum = 0;
vector<int> a;
a.resize(3*n);
for (int i = 0; i < (3 * n); i++)
{
cin >> a[i];
}
/*
排序，然后取下标为3n - 2，3n - 4 ，3n - 4... n+2，n位置的元素累加即可，
相当下标为[0,n-1]的n个数做每组的最左边的数，剩下的2个数据两个为一组，
大的值做最右边的数，次大的做中间值，这里就是把这个次大的值加起来
*/
std::sort(a.begin(), a.end());
for (int i = n; i <= 3 * n - 2; i += 2)
{
sum += a[i];
}
cout << sum << endl;
}
}