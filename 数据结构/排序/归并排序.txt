#include<iostream>
using namespace std;

void MergeData(int* array, int left, int mid, int right, int* temp) {
	int begin1 = left, end1 = mid;
	int begin2 = mid, end2 = right;
	int index = left;
	while (begin1 < end1 && begin2 < end2) {
		if (array[begin1] <= array[begin2])
			temp[index++] = array[begin1++];
		else
			temp[index++] = array[begin2++];
	}
	while (begin1 < end1)
		temp[index++] = array[begin1++];
	while (begin2 < end2)
		temp[index++] = array[begin2++];
}

void _Mergesort(int* array, int left, int right, int* temp) {
	if (right - left > 1) {
		int mid = left + ((right - left) >> 1);
		//[left,mid)
		_Mergesort(array, left, mid, temp);
		_Mergesort(array, mid, right, temp);//有序但是在临时空间中
		MergeData(array, left, mid, right, temp);
		memcpy(array + left, temp + left, (right - left)*sizeof(array[0]));
	}
}

void Mergesort(int* array,int size) {
	int* temp = new int[size];
	_Mergesort(array, 0, size, temp);
	delete[] temp;
}

void MergeNor(int* array, int size) {
	int* temp = new int[size];

	int gap = 1;
	while (gap < size) {
		for (int i = 0; i < size; i += 2 * gap) {
			int left = i;
			int mid = left + gap;
			int right = mid + gap;

			if (right >= size)
				right == size;
			MergeData(array, left, mid, right, temp);
		}
		memcpy(array, temp, size * sizeof(array[0]));
	}
}

int main() {
	int arr[] = { 1,2,6,8,3,9,0,4,7,5 };
	Mergesort(arr, 10);//时间复杂度NlogN  空间复杂度N
	for (int i = 0; i < 10; ++i) {
		cout << arr[i] << " ";
	}
	cout << endl;
	return 0;
}