头文件SList.h
#pragma once

typedef int SDataType;

typedef struct SListNode {
SDataType _data;
struct SListNode* _PNext;
}Node, *PNode;

// 链表的结构，给一个头指针保存链表第一个节点的地址
typedef struct SList
{
PNode _pHead; // 指向链表中的第一个节点
}SList, *PSList;

#include <stdio.h>
#include “SList.h”
#include <assert.h>
#include <stdlib.h>
#include <stddef.h>

void SListinit(SList* s) {// 链表的初始化
assert(s);
s->_pHead = NULL;
}

PNode BuySListNode(SDataType data) {//购买节点
PNode pNewNode = (PNode)malloc(sizeof(Node));
if (pNewNode == NULL) {
assert(0);
return NULL;
}
pNewNode->_data = data;
pNewNode->_PNext = NULL;
return pNewNode;
}

void SListPushBack(SList* s, SDataType data) {//尾插
//找链表最后一个节点
assert(s);
PNode pNewNode = BuySListNode(data);
if (s->_pHead == NULL) {//链表没有节点的情况
s->_pHead = pNewNode;
}
else {
PNode pCur = s->_pHead;
while (pCur->_PNext) {
pCur = pCur->_PNext;
}
//让最后一个节点指向新节点
pCur->_PNext = pNewNode;
}
}

void SListPopBack(SList* s) {//尾删
assert(s);
if (s->_pHead == NULL) {//链表中没有节点
return;
}
else if (s->_pHead->_PNext == NULL) {//只有一个节点
free(s->_pHead);
s->_pHead = NULL;
}
else { //多个节点
PNode pCur = s->_pHead;
PNode pPre = NULL;
while (pCur->_PNext) {
pPre = pCur;
pCur = pCur->_PNext;
}
free(pCur);
pPre->_PNext = NULL;
}
}

void SListPushFront(SList* s, SDataType data) {//头插
assert(s);
PNode pNewNode = BuySListNode(data);
if (s->_pHead == NULL) {//链表为空
s->_pHead = pNewNode;
}
else {
pNewNode->_PNext = s->_pHead;
s->_pHead = pNewNode;
}
}

void SListPopFront(SList* s) {//头删
assert(s);
if (s->_pHead == NULL) {//链表为空
return;
}
else if (s->_pHead->_PNext == NULL) {//只有一个节点
free(s->_pHead);
s->_pHead = NULL;
}
else {
PNode pCur = s->_pHead;
s->_pHead = pCur->_PNext;
free(pCur);
}
}

void SListInsert(PNode pos, SDataType data) {//在pos位置之后插入节点
PNode pNewNode = NULL;
if (pos == NULL) {
return;
}
else {
pNewNode = BuySListNode(data);
pNewNode->_PNext = pos->_PNext;
pos->_PNext = pNewNode;
}
}

void SListErase(SList* s, PNode pos) {//删除pos位置的节点
assert(s);
if (pos == NULL || s->_pHead == NULL) {
return;
}
if (pos == s->_pHead) {
s->_pHead = pos->_PNext;
}
else {
PNode pPrePos = s->_pHead;
while (pPrePos&&pPrePos->_PNext != pos) {
pPrePos = pPrePos->_PNext;
}
pPrePos->_PNext = pos->_PNext;
}
free(pos);
}

PNode SListFind(SList* s, SDataType data) {…寻找值为data的节点
assert(s);
PNode pCur = s->_pHead;
while (pCur) {
if (pCur->_data == data) {
return pCur;
}
pCur = pCur->_PNext;
}
return NULL;
}

int SListSize(SList* s) {//计算有效节点
assert(s);
int count = 0;
PNode pCur = s->_pHead;
while (pCur) {
count++;
pCur = pCur->_PNext;
}
return count;
}

int SListEmpty(SList* s) {//判空
assert(s);
if (s->_pHead == NULL) {
return -1;
}
return 0;
}

void SListClear(SList* s) {//清空链表
assert(s);
if (s->_pHead == NULL) {
return;
}
PNode pCur = s->_pHead;
while (pCur->_PNext) { //循环清空链表中的节点
PNode Tmp = pCur->_PNext;
free(pCur);
pCur = Tmp;
}
if (pCur) { //清空最后一个节点
free(pCur);
pCur = NULL;
}
}

void SListDestroy(SList* s) {//销毁链表
assert(s);
if (s->_pHead == NULL) {
free(s->_pHead);
return;
}
while (s->_pHead) {
PNode Tmp = s->_pHead->_PNext;
free(s->_pHead);
s->_pHead = Tmp;
}
}

void SListPrint(SList* s) {//打印链表
assert(s);
PNode pCur = s->_pHead;
while (pCur) {
printf("%d “, pCur->_data);
pCur = pCur->_PNext;
}
printf(”\n");
}

void main() {
SList s;
SListinit(&s);
SListPushBack(&s, 1);
SListPushBack(&s, 2);
SListPushBack(&s, 4);
SListPushBack(&s, 5);
SListPrint(&s);
SListPushBack(& s, 6);
SListPrint(&s);
SListPopBack(&s);
SListPrint(&s);
SListPushFront(&s, 0);
SListPrint(&s);
SListFind(&s, 4);
SListDestroy(&s);
//TestSList();
system(“pause”);
return;
}
